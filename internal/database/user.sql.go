// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package database

import (
	"context"
	"time"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, name, email, password FROM "user" WHERE email=$1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, created_at, name, email, password FROM "user" WHERE id=$1
`

func (q *Queries) GetUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserWithSession = `-- name: GetUserWithSession :one
SELECT "user".id, created_at, name, email, password, session.id, expires_at, user_id FROM "user" INNER JOIN session ON "user".id = session.user_id
`

type GetUserWithSessionRow struct {
	ID        string
	CreatedAt time.Time
	Name      string
	Email     string
	Password  string
	ID_2      string
	ExpiresAt time.Time
	UserID    string
}

func (q *Queries) GetUserWithSession(ctx context.Context) (GetUserWithSessionRow, error) {
	row := q.db.QueryRowContext(ctx, getUserWithSession)
	var i GetUserWithSessionRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.ID_2,
		&i.ExpiresAt,
		&i.UserID,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, created_at, name, email, password FROM "user"
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUser = `-- name: InsertUser :one
INSERT INTO "user" (id, created_at, name, email, password)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, name, email, password
`

type InsertUserParams struct {
	ID        string
	CreatedAt time.Time
	Name      string
	Email     string
	Password  string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.ID,
		arg.CreatedAt,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}
